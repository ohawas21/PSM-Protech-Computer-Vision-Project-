stages:
  - software_build
  - software_deploy
  - documentation

variables:
  # Use GitLab‚Äôs built-in registry variables
  REGISTRY_URL: $CI_REGISTRY
  IMAGE_NAME:   $CI_REGISTRY_IMAGE
  IMAGE_TAG:    main
  FULL_IMAGE:   $IMAGE_NAME:$IMAGE_TAG

# -------------------------------------------
# STAGE 1: SOFTWARE BUILD
# -------------------------------------------
software_build:
  stage: software_build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    # Authenticate to the Container Registry
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - echo "üî® Building Docker image..."
    - docker build -t "$FULL_IMAGE" -f Src/deploy/Dockerfile Src/deploy
    - echo "üöÄ Pushing Docker image..."
    - docker push "$FULL_IMAGE"
    - echo "üîç Post-build Git status:"
    - git status
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

# -------------------------------------------
# STAGE 2: SOFTWARE DEPLOY
# -------------------------------------------
software_deploy:
  stage: software_deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - software_build
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - echo "üîÑ Pulling and restarting the container..."
    - docker pull "$FULL_IMAGE"
    # Uncomment & adjust to actually run:
    # - docker stop pixmind_psm || true
    # - docker rm   pixmind_psm || true
    # - docker run -d --name pixmind_psm -p 5001:5001 "$FULL_IMAGE"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

# -------------------------------------------
# STAGE 3: DOCUMENTATION
# -------------------------------------------
build_documentation:
  stage: documentation
  image: danteev/texlive
  needs:
    - software_deploy
  script:
    - |
      if [ -d "Documentation" ]; then
        cd Documentation
        echo "üìö Building LaTeX documentation..."
        for tex in *.tex; do
          latexmk -pdf "$tex"
        done
      else
        echo "‚ö†Ô∏è Documentation folder not found."
      fi
  artifacts:
    paths:
      - Documentation/*.pdf
    expire_in: 1 week
    when: always
stages:
  - software_precheck
  - software_build
  - software_deploy
  - documentation

variables:
  # Use GitLab‚Äôs built-in registry variables
  REGISTRY_URL: $CI_REGISTRY
  IMAGE_NAME:   $CI_REGISTRY_IMAGE
  IMAGE_TAG:    main
  FULL_IMAGE:   $IMAGE_NAME:$IMAGE_TAG

# -------------------------------------------
# STAGE 1: SOFTWARE PRECHECK
# -------------------------------------------
git_repository_status:
  stage: software_precheck
  image: alpine:latest
  script:
    - apk add --no-cache git curl
    - echo "üîç Verifying Git repository..."
    - git status
    - git rev-parse --abbrev-ref HEAD
    - echo "üîÑ Checking registry API..."
    - curl -fsSL -o /dev/null -w "%{http_code}" "$REGISTRY_URL/v2/" || true

.model_check_template: &model_check_template
  stage: software_precheck
  image: alpine:latest
  needs: [git_repository_status]
  script:
    - test -d "Src/Model/${FALCON_DIR}" \
      && echo "‚úÖ ${FALCON_DIR} folder exists" \
      || (echo "‚ùå ${FALCON_DIR} missing" && exit 1)

check_model_folders:
  <<: *model_check_template
  parallel:
    matrix:
      - FALCON_DIR: "falcon_r1"
      - FALCON_DIR: "falcon_r2"
      - FALCON_DIR: "falcon_r3"
      - FALCON_DIR: "falcon_r4"

# -------------------------------------------
# STAGE 2: SOFTWARE BUILD
# -------------------------------------------
software_build:
  stage: software_build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  needs:
    - check_model_folders
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - echo "üì¶ Validating model artifacts..."
    - |
      for i in 1 2 3; do
        [ -f "Src/deploy/models/falcon_r${i}.pt" ] \
          || { echo "‚ùå Src/deploy/models/falcon_r${i}.pt missing"; exit 1; }
      done
    - echo "üî® Building Docker image..."
    - docker build -t "$FULL_IMAGE" -f Src/deploy/Dockerfile Src/deploy
    - echo "üöÄ Pushing Docker image..."
    - docker push "$FULL_IMAGE"
    - echo "üîç Post-build Git status:"
    - git status
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 3: SOFTWARE DEPLOY
# -------------------------------------------
software_deploy:
  stage: software_deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - software_build
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - echo "üîÑ Pulling and deploying Docker image on host..."
    - docker pull "$FULL_IMAGE"
    # Insert your deploy commands below, e.g.:
    # - docker stop pixmind_psm || true
    # - docker rm pixmind_psm   || true
    # - docker run -d --name pixmind_psm -p 5001:5001 "$FULL_IMAGE"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 4: DOCUMENTATION
# -------------------------------------------
build_documentation:
  stage: documentation
  image: danteev/texlive
  needs:
    - software_deploy
  script:
    - |
      if [ -d "Documentation" ]; then
        cd Documentation
        echo "üìö Building LaTeX documentation..."
        for f in *.tex; do
          latexmk -pdf "$f"
        done
      else
        echo "‚ö†Ô∏è Documentation folder not found."
      fi
  artifacts:
    paths:
      - Documentation/*.pdf
    expire_in: 1 week
    when: always
stages:
  - software_precheck
  - software_build
  - software_deploy
  - documentation

variables:
  # Registry configuration
  REGISTRY_URL: registry-ce.th-rosenheim.de

  # Image naming
  IMAGE_NAME: $REGISTRY_URL/pse-aai-25/pixmind_psm
  IMAGE_TAG: main
  FULL_IMAGE_NAME: $IMAGE_NAME:$IMAGE_TAG

  # Credentials (define these in Project Settings ‚Üí CI/CD ‚Üí Variables)
  DOCKER_USER: $DOCKER_USER      # e.g. deploy token or service account
  DOCKER_PASS: $DOCKER_PASS      # corresponding password or token

# -------------------------------------------
# STAGE 1: SOFTWARE PRECHECK
# -------------------------------------------
git_repository_status:
  stage: software_precheck
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - apk add --no-cache git curl
    - echo "üîç Verifying Git repository..."
    - git status
    - git rev-parse --abbrev-ref HEAD

    - echo "üîê Checking Docker registry login..."
    - echo "$DOCKER_PASS" | docker login "$REGISTRY_URL" -u "$DOCKER_USER" --password-stdin

    - echo "üîÑ Pinging Docker registry endpoint..."
    - curl -s -o /dev/null -w "%{http_code}" https://$REGISTRY_URL/v2/ || true

.model_check_template: &model_check_template
  stage: software_precheck
  image: alpine:latest
  needs: [git_repository_status]
  script:
    - test -d "Src/Model/${FALCON_DIR}" && echo "‚úÖ ${FALCON_DIR} OK" || (echo "‚ùå ${FALCON_DIR} missing" && exit 1)

check_model_folders:
  <<: *model_check_template
  parallel:
    matrix:
      - FALCON_DIR: "falcon_r1"
      - FALCON_DIR: "falcon_r2"
      - FALCON_DIR: "falcon_r3"
      - FALCON_DIR: "falcon_r4"

# -------------------------------------------
# STAGE 2: SOFTWARE BUILD
# -------------------------------------------
software_build:
  stage: software_build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  needs:
    - check_model_folders
  before_script:
    - echo "$DOCKER_PASS" | docker login "$REGISTRY_URL" -u "$DOCKER_USER" --password-stdin
  script:
    - echo "üì¶ Validating model artifacts (.pt files)..."
    - |
      for i in 1 2 3; do
        if [ ! -f "Src/deploy/models/falcon_r${i}.pt" ]; then
          echo "‚ùå Missing: Src/deploy/models/falcon_r${i}.pt"
          exit 1
        fi
      done
    - docker build -t "$FULL_IMAGE_NAME" -f Src/deploy/Dockerfile Src/deploy
    - docker push "$FULL_IMAGE_NAME"
    - echo "üîç Post-build Git status for traceability:"
    - git status
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 3: SOFTWARE DEPLOY
# -------------------------------------------
software_deploy:
  stage: software_deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - software_build
  before_script:
    - echo "$DOCKER_PASS" | docker login "$REGISTRY_URL" -u "$DOCKER_USER" --password-stdin
  script:
    - echo "üöÄ Deploying pixmind_psm container..."
    - docker pull "$FULL_IMAGE_NAME"
    # Insert your `docker run` or `helm upgrade` commands here
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 4: DOCUMENTATION
# -------------------------------------------
build_documentation:
  stage: documentation
  image: danteev/texlive
  needs:
    - software_deploy
  script:
    - |
      if [ -d "Documentation" ]; then
        cd Documentation
        echo "üìö Building LaTeX documentation..."
        for file in *.tex; do
          latexmk -pdf "$file"
        done
      else
        echo "‚ö†Ô∏è Documentation folder not found."
      fi
  artifacts:
    paths:
      - Documentation/*.pdf
    expire_in: 1 week
    when: always
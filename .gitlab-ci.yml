stages:
  - Git Access
  - Model Check
  - Build Whole Model
  - model_processing
  - test
  - deploy
  - build_docs

variables:
  GITHUB_USER: vaikundamanimugesh
  IMAGE_NAME: ghcr.io/$GITHUB_USER/psmprotech_mvp
  IMAGE_TAG: $CI_COMMIT_REF_SLUG
  FULL_IMAGE_NAME: $IMAGE_NAME:$IMAGE_TAG

# -------------------------------------------
# STAGE 1: GIT ACCESS VALIDATION
# -------------------------------------------
check_git_access:
  stage: Git Access
  image: alpine:latest
  script:
    - apk add --no-cache git
    - echo "üîç Verifying Git repository..."
    - git status
    - git rev-parse --abbrev-ref HEAD

# -------------------------------------------
# STAGE 2: CHECK MODEL FOLDERS
# -------------------------------------------
validate_model_folders:
  stage: Model Check
  image: alpine:latest
  script:
    - echo "üìÅ Checking for required model folders..."
    - |
      for i in 1 2 3 4; do
        if [ ! -d "Src/Model/falcon_r$i" ]; then
          echo "‚ùå Missing: Src/Model/falcon_r$i"
          exit 1
        fi
      done
    - echo "‚úÖ Model folder check passed."
  needs: [check_git_access]

# -------------------------------------------
# STAGE 3: BUILD IMAGE AFTER .PT VALIDATION
# -------------------------------------------
build_application_image:
  stage: Build Whole Model
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
  script:
    - echo "üì¶ Validating model files..."
    - |
      for i in 1 2 3; do
        if [ ! -f "Src/deploy/models/falcon_r$i.pt" ]; then
          echo "‚ùå Missing: Src/deploy/models/falcon_r$i.pt"
          exit 1
        fi
      done
    - echo "üê≥ Building Docker image..."
    - docker build -t $FULL_IMAGE_NAME -f Src/deploy/Dockerfile Src/deploy
    - docker push $FULL_IMAGE_NAME
  needs: [validate_model_folders]
  rules:
    - if: $CI_COMMIT_BRANCH

# -------------------------------------------
# STAGE 4: OPTIONAL MODEL LOGIC
# -------------------------------------------
ocr_classification_test:
  stage: model_processing
  image: python:3.10
  allow_failure: true
  script:
    - |
      if [ -d "Src/Model/OCR_Classification/Model" ]; then
        cd Src/Model/OCR_Classification/Model
        pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          python test_model.py
        fi
      else
        echo "‚ö†Ô∏è OCR model directory not found. Skipping."
      fi

# -------------------------------------------
# STAGE 5: CONTAINER TESTS
# -------------------------------------------
application_tests:
  stage: test
  image: $FULL_IMAGE_NAME
  script:
    - echo "üß™ Running container smoke test..."
  needs: [build_application_image]

# -------------------------------------------
# STAGE 6: DEPLOY
# -------------------------------------------
deploy_application:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üöÄ Deploying image $FULL_IMAGE_NAME..."
    # Insert your deployment logic here
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: [build_application_image, application_tests]

# -------------------------------------------
# STAGE 7: DOCUMENTATION (LAST)
# -------------------------------------------
build_documentation:
  stage: build_docs
  image: danteev/texlive
  script:
    - |
      if [ -d "Documentation" ]; then
        cd Documentation
        echo "üìö Building LaTeX documentation..."
        for file in *.tex; do
          if [ -f "$file" ]; then
            latexmk -pdf "$file"
          fi
        done
      else
        echo "‚ö†Ô∏è Documentation folder not found."
      fi
  artifacts:
    paths:
      - Documentation/*.pdf
    expire_in: 1 week
    when: always
  needs: [deploy_application]
stages:
  - Git Access
  - Model Check
  - Build Whole Model
  - model_processing
  - test
  - deploy
  - build_docs

variables:
  GITHUB_USER: vaikundamanimugesh
  IMAGE_NAME: ghcr.io/$GITHUB_USER/psmprotech_mvp
  IMAGE_TAG: main                        # ‚Üê force all images to use ‚Äú:main‚Äù
  FULL_IMAGE_NAME: $IMAGE_NAME:$IMAGE_TAG

# -------------------------------------------
# STAGE 1: GIT ACCESS
# -------------------------------------------
check_git_access:
  stage: Git Access
  image: alpine:latest
  script:
    - apk add --no-cache git
    - echo "üîç Verifying Git repository..."
    - git status
    - git rev-parse --abbrev-ref HEAD

# -------------------------------------------
# STAGE 2: MODEL FOLDER CHECKS (MATRIX)
# -------------------------------------------
.check_model_template: &check_model_template
  stage: Model Check
  image: alpine:latest
  needs: [check_git_access]
  script:
    - test -d "Src/Model/${FALCON_DIR}" && echo "‚úÖ ${FALCON_DIR} OK" || (echo "‚ùå ${FALCON_DIR} missing" && exit 1)

check_model_folders:
  <<: *check_model_template
  parallel:
    matrix:
      - FALCON_DIR: "falcon_r1"
      - FALCON_DIR: "falcon_r2"
      - FALCON_DIR: "falcon_r3"
      - FALCON_DIR: "falcon_r4"

# -------------------------------------------
# STAGE 3: BUILD & PUSH DOCKER IMAGE
# -------------------------------------------
build_application_image:
  stage: Build Whole Model
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  needs:
    - check_model_folders
  before_script:
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
  script:
    - echo "üì¶ Validating .pt files..."
    - |
      for i in 1 2 3; do
        if [ ! -f "Src/deploy/models/falcon_r${i}.pt" ]; then
          echo "‚ùå Missing: Src/deploy/models/falcon_r${i}.pt"
          exit 1
        fi
      done
    - docker build -t "$FULL_IMAGE_NAME" -f Src/deploy/Dockerfile Src/deploy
    - docker push "$FULL_IMAGE_NAME"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 4: MODEL PROCESSING
# -------------------------------------------
model_processing:
  stage: model_processing
  image: python:3.9-alpine
  needs:
    - build_application_image
  script:
    - echo "üîÑ Running model processing..."
    # ‚Äì your actual commands here ‚Äì
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 5: TEST
# -------------------------------------------
application_tests:
  stage: test
  image: python:3.9
  needs:
    - model_processing
  script:
    - echo "üß™ Running application-level tests..."
    # ‚Äì your test commands here ‚Äì
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 6: DEPLOY
# -------------------------------------------
deploy_application:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - application_tests
  before_script:
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
  script:
    - echo "üöÄ Deploying application container..."
    # ‚Äì e.g., docker push $FULL_IMAGE_NAME or helm upgrade ‚Äì‚Äì
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

# -------------------------------------------
# STAGE 7: BUILD DOCS
# -------------------------------------------
build_documentation:
  stage: build_docs
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - deploy_application
  before_script:
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
  script:
    - echo "üìö Building and pushing docs container..."
    # ‚Äì e.g., docker build -t ghcr.io/$GITHUB_USER/psmprotech_docs:main -f docs/Dockerfile docs
    # - docker push ghcr.io/$GITHUB_USER/psmprotech_docs:main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

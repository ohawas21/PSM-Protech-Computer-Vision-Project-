import os
import shutil
import random
import yaml
import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from ultralytics import YOLO
import time
import torch

# Set random seed for reproducibility
random.seed(42)
np.random.seed(42)
torch.manual_seed(42)

# Define paths
DATASET_DIR = "dataset"
IMAGE_FILES_DIR = "image_files"
IMAGES_DIR = os.path.join(DATASET_DIR, "images")
LABELS_DIR = os.path.join(DATASET_DIR, "labels")
OUTPUT_DIR = "runs/yolov8"
YAML_FILE = "data_yolov8.yaml"

# Create directories for train and val splits
def create_data_dirs():
    for folder in [
        os.path.join(IMAGES_DIR, "train"),
        os.path.join(IMAGES_DIR, "val"),
        os.path.join(LABELS_DIR, "train"),
        os.path.join(LABELS_DIR, "val")
    ]:
        os.makedirs(folder, exist_ok=True)

# Extract class names from image filenames
def get_class_names(image_files):
    class_names = set()
    for img in image_files:
        base_name = os.path.splitext(img)[0]
        class_name = base_name.split('_')[0] if '_' in base_name else base_name
        class_names.add(class_name)
    return sorted(list(class_names))

# Generate dummy YOLO-format labels
def generate_dummy_labels(image_path, class_name, class_names):
    class_id = class_names.index(class_name)
    img = cv2.imread(image_path)
    if img is None:
        return None
    h, w = img.shape[:2]
    x_center, y_center, box_width, box_height = 0.5, 0.5, 0.5, 0.5
    label = f"{class_id} {x_center} {y_center} {box_width} {box_height}"
    return label

# Split dataset and generate labels
def split_dataset(test_size=0.2):
    image_files = [f for f in os.listdir(IMAGE_FILES_DIR) 
                   if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    if not image_files:
        raise ValueError("No images found in image_files directory")
    
    class_names = get_class_names(image_files)
    if not class_names:
        raise ValueError("No class names could be inferred from image filenames")
    
    train_imgs, val_imgs = train_test_split(
        image_files, test_size=test_size, random_state=42
    )
    
    os.makedirs(LABELS_DIR, exist_ok=True)
    for split, img_list in [("train", train_imgs), ("val", val_imgs)]:
        for img in img_list:
            src_img_path = os.path.join(IMAGE_FILES_DIR, img)
            dst_img_path = os.path.join(IMAGES_DIR, split, img)
            shutil.copy(src_img_path, dst_img_path)
            
            base_name = os.path.splitext(img)[0]
            class_name = base_name.split('_')[0] if '_' in base_name else base_name
            label = generate_dummy_labels(src_img_path, class_name, class_names)
            if label:
                label_path = os.path.join(LABELS_DIR, split, f"{base_name}.txt")
                with open(label_path, 'w') as f:
                    f.write(label)
    
    return len(train_imgs), len(val_imgs), class_names

# Create YAML configuration file
def create_yaml(num_classes, class_names):
    data = {
        'train': os.path.join(IMAGES_DIR, 'train'),
        'val': os.path.join(IMAGES_DIR, 'val'),
        'nc': num_classes,
        'names': class_names
    }
    with open(YAML_FILE, 'w') as f:
        yaml.dump(data, f, default_flow_style=False)

# Train model and return metrics
def train_model(epochs=10, batch_size=8, imgsz=640):
    model = YOLO("yolov8n.pt")
    results = model.train(
        data=YAML_FILE,
        epochs=epochs,
        batch=batch_size,
        imgsz=imgsz,
        device=0 if torch.cuda.is_available() else 'cpu',
        project=OUTPUT_DIR,
        name="train",
        patience=3,
        seed=42
    )
    metrics = model.val()
    return model, metrics

# Evaluate inference speed
def evaluate_inference_speed(model, test_images, num_runs=50):
    times = []
    for img_path in test_images[:num_runs]:
        start_time = time.time()
        model.predict(os.path.join(IMAGES_DIR, "val", img_path), conf=0.5, iou=0.75)
        times.append(time.time() - start_time)
    avg_time = np.mean(times) * 1000  # Convert to milliseconds
    return avg_time

# Save results
def save_results(metrics, speed):
    results = {
        'mAP@50': metrics.results_dict['metrics/mAP50(B)'],
        'mAP@50:95': metrics.results_dict['metrics/mAP50-95(B)'],
        'Inference Speed (ms)': speed
    }
    with open(os.path.join(OUTPUT_DIR, 'results.yaml'), 'w') as f:
        yaml.dump(results, f, default_flow_style=False)
    print("\nYOLOv8 Results:")
    print(pd.DataFrame([results]))

def main():
    create_data_dirs()
    train_count, val_count, class_names = split_dataset()
    print(f"YOLOv8: Dataset split: {train_count} training images, {val_count} validation images")
    print(f"Classes: {class_names}")
    
    create_yaml(len(class_names), class_names)
    model, metrics = train_model()
    val_images = [f for f in os.listdir(os.path.join(IMAGES_DIR, "val")) 
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    speed = evaluate_inference_speed(model, val_images)
    save_results(metrics, speed)

if __name__ == "__main__":
    main()